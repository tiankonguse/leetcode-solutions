#include "base.h"
// 树的直径，树形DP

// 算法：求出每个节点为子树根时的最长两条路径

const int N = 10000 + 10;

vector<vector<int>> D;
vector<vector<int>> E;

int dfs(int u, int fa) {
  int d = 0;
  D[u].push_back(0);
  D[u].push_back(0);
  for (int v : E[u]) {
    if (v == fa) continue;
    d = max(d, dfs(v, u));
    D[u].push_back(D[v].front() + 1);
    for (int i = 2; i > 0; i--) {
      if (D[u][i] > D[u][i - 1]) {
        swap(D[u][i], D[u][i - 1]);
      }
    }
    D[u].pop_back();
  }
  return max(d, D[u][0] + D[u][1]);
}

int Solver(vector<vector<int>>& edges) {
  int n = edges.size() + 1;
  E.clear();
  E.resize(n);
  D.resize(n);
  for (auto& e : edges) {
    int u = e[0];
    int v = e[1];
    E[u].push_back(v);
    E[v].push_back(u);
  }
  return dfs(1, 0);
}
